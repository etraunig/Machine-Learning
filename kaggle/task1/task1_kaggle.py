# -*- coding: utf-8 -*-
"""task1_kaggle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n-hRV6J2sd5pQJISqxXghWdHoe-qUOuY

Alunos: Eduardo Enes Traunig, Erick Branquinho Machado - Atividade 1 do Kaggle
"""

# Students: Eduardo Enes Traunig, Erick Branquinho Machado
search_for_model = True

"""Imports"""

from pathlib import Path

import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score

from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import make_pipeline

"""Getting training and testing data from github"""

url1 = "https://raw.githubusercontent.com/etraunig/Machine-Learning/refs/heads/main/kaggle/task1/train.csv"
url2 = "https://raw.githubusercontent.com/etraunig/Machine-Learning/refs/heads/main/kaggle/task1/test.csv"

train_df = pd.read_csv(url1, index_col=[0])
test_df = pd.read_csv(url2, index_col=[0])

X = train_df.drop(columns=['class'])
y = train_df['class']
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)

train_df.head()

"""K-Nearest Neighbors"""

# Search for the best knn model
if search_for_model:
  # Define hyperparameters to search
  param_grid = {
      'n_neighbors': [7, 8, 9],
      'weights': ['uniform','distance'],
      'leaf_size': [1, 2, 3, 4, 5],
      'p': [1, 2, 3]
  }
  # Grid search with cross-validation
  grid_search = GridSearchCV(KNeighborsClassifier(), param_grid, n_jobs=-1)
  grid_search.fit(X, y)

  # Get the best model
  best_model = grid_search.best_estimator_
  print("Best parameters:", best_model.get_params())
  print("Best cross-validation score:", grid_search.best_score_)
  best_score = grid_search.best_score_

# Hardcoded knn model
else:
  best_model = KNeighborsClassifier(leaf_size=1, n_neighbors=8, p=3, weights='distance')
  cv_scores = cross_val_score(best_model, X, y, cv=5)
  print("Cross-validation scores:", cv_scores)
  print("Mean cross-validation score:", cv_scores.mean())

"""Creating submission file"""

def create_submission_file(predictions, test_df, submission_file_name="submission.csv"):
    submission_df = pd.DataFrame({'id': test_df.index, 'Target': predictions})
    submission_df.to_csv(submission_file_name, index=False)
    print(f"Submission file '{submission_file_name}' created successfully.")

# Getting the final predictions
best_model.fit(X, y)
final_predictions = best_model.predict(test_df)

# Creating submission file for Kaggle
create_submission_file(final_predictions, test_df)